---
// src/components/ReservationForm.astro
import businessData from '../data/businessProperties.json';
import type { BusinessData } from '../types/businessData';

const data = businessData as BusinessData;
---

<div id="reservation-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>イベント参加予約</h3>
      <button class="close-button" onclick="closeReservationModal()">&times;</button>
    </div>
    
    <form 
      id="reservation-form" 
      name="event-reservation" 
      method="POST" 
      data-netlify="true"
      netlify-honeypot="bot-field"
      class="reservation-form"
    >
      <!-- Netlify Form用の隠しフィールド -->
      <input type="hidden" name="form-name" value="event-reservation" />
      
      <!-- ボット対策（隠しフィールド） -->
      <p style="display: none;">
        <label>Don't fill this out if you're human: <input name="bot-field" /></label>
      </p>
      
      <div class="form-group">
        <label for="event-title">参加イベント</label>
        <input type="text" id="event-title" name="event_title" readonly>
      </div>
      
      <div class="form-group">
        <label for="event-date">希望日時 <span class="required">*</span></label>
        <input type="text" id="event-date" name="event_date" required placeholder="例：7月28日 午後2時から、土曜日の午前中など">
        <small class="form-hint">ご希望の日時を自由にご記入ください</small>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="lastname">姓 <span class="required">*</span></label>
          <input type="text" id="lastname" name="lastname" required>
        </div>
        <div class="form-group">
          <label for="firstname">名 <span class="required">*</span></label>
          <input type="text" id="firstname" name="firstname" required>
        </div>
      </div>
            
      <div class="form-group">
        <label for="email">メールアドレス <span class="required">*</span></label>
        <input type="email" id="email" name="email" required>
      </div>
      
      <div class="form-group">
        <label for="phone">電話番号</label>
        <input type="tel" id="phone" name="phone">
      </div>
      
      <div class="form-group">
        <label for="skill-level">棋力</label>
        <select id="skill-level" name="skill_level">
          <option value="">選択してください</option>
          <option value="初心者">初心者</option>
          <option value="15級-10級">15級-10級</option>
          <option value="9級-6級">9級-6級</option>
          <option value="5級-1級">5級-1級</option>
          <option value="初段-三段">初段-三段</option>
          <option value="四段以上">四段以上</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="message">メッセージ・ご質問</label>
        <textarea id="message" name="message" rows="4" placeholder="何かご質問やご要望がございましたらお聞かせください"></textarea>
      </div>
      
      <!-- 隠しフィールド（送信時に自動設定） -->
      <input type="hidden" id="event-id" name="event_id" />
      <input type="hidden" id="event-type" name="event_type" />
      <input type="hidden" id="submission-time" name="submission_time" />
      <input type="hidden" id="page-url" name="page_url" />
      
      <div class="form-actions">
        <button type="button" class="cta-button secondary" onclick="closeReservationModal()">キャンセル</button>
        <button type="submit" class="cta-button">予約を送信</button>
      </div>
    </form>
    
    <div id="form-success" class="success-message" style="display: none;">
      <h3>予約を受付いたしました！</h3>
      <p>ご予約ありがとうございます。内容を確認次第、ご連絡いたします。</p>
      <p>ご質問がございましたら、お気軽にお電話ください。</p>
      <p><strong>TEL: {data.contactInfo.phone}</strong></p>
      <button class="cta-button" onclick="closeReservationModal()">閉じる</button>
    </div>
  </div>
</div>

<script>
  interface EventData {
    id: string;
    title: string;
    date: string;
    time: string;
    type: string;
  }

  let currentEventData: EventData = {
    id: '',
    title: '',
    date: '',
    time: '',
    type: ''
  };

  function openReservationModal(eventTitle: string, eventDate: string, eventTime: string, eventId?: string): void {
    currentEventData = {
      id: eventId || 'event_' + Date.now(),
      title: eventTitle,
      date: eventDate,
      time: eventTime,
      type: getEventType(eventTitle)
    };
    
    // フォームフィールドに値を設定
    const eventTitleInput = document.getElementById('event-title') as HTMLInputElement;
    const eventDateInput = document.getElementById('event-date') as HTMLInputElement;
    const eventIdInput = document.getElementById('event-id') as HTMLInputElement;
    const eventTypeInput = document.getElementById('event-type') as HTMLInputElement;
    
    if (eventTitleInput) eventTitleInput.value = eventTitle;
    //if (eventDateInput) eventDateInput.value = `${eventDate} ${eventTime}`;
    if (eventIdInput) eventIdInput.value = currentEventData.id;
    if (eventTypeInput) eventTypeInput.value = currentEventData.type;
    
    // モーダル表示
    const modal = document.getElementById('reservation-modal') as HTMLElement;
    if (modal) {
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }
  }

  // 一般予約（ホームページから）用の関数
  function openGeneralReservationModal(): void {
    currentEventData = {
      id: 'general_reservation_' + Date.now(),
      title: '通常対局・見学',
      date: '希望日をお聞かせください',
      time: '営業時間内',
      type: '通常対局'
    };
    
    // フォームフィールドに値を設定
    const eventTitleInput = document.getElementById('event-title') as HTMLInputElement;
    const eventDateInput = document.getElementById('event-date') as HTMLInputElement;
    const eventIdInput = document.getElementById('event-id') as HTMLInputElement;
    const eventTypeInput = document.getElementById('event-type') as HTMLInputElement;
    
    if (eventTitleInput) eventTitleInput.value = '通常対局・見学';
    if (eventDateInput) eventDateInput.value = '希望日をお聞かせください（営業時間: 12:00-19:00）';
    if (eventIdInput) eventIdInput.value = currentEventData.id;
    if (eventTypeInput) eventTypeInput.value = currentEventData.type;
    
    // モーダル表示
    const modal = document.getElementById('reservation-modal') as HTMLElement;
    if (modal) {
      modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
    }
  }

  // グローバルスコープに関数を追加
  (window as any).openReservationModal = openReservationModal;
  (window as any).openGeneralReservationModal = openGeneralReservationModal;

  function closeReservationModal(): void {
    const modal = document.getElementById('reservation-modal') as HTMLElement;
    const form = document.getElementById('reservation-form') as HTMLFormElement;
    const successMessage = document.getElementById('form-success') as HTMLElement;
    
    if (modal) modal.style.display = 'none';
    document.body.style.overflow = 'auto';
    if (form) form.style.display = 'block';
    if (successMessage) successMessage.style.display = 'none';
    if (form) form.reset();
  }
  (window as any).closeReservationModal = closeReservationModal;
  
  // イベントタイプを判定
  function getEventType(eventTitle: string): string {
    if (eventTitle.includes('トーナメント')) {
      return '定例トーナメント';
    } else if (eventTitle.includes('初心者教室') || eventTitle.includes('子供教室')) {
      return '初心者教室';
    } else if (eventTitle.includes('特別')) {
      return '特別イベント';
    } else {
      return '通常対局';
    }
  }

  // フォーム送信処理（Netlify Forms用）
  document.addEventListener('DOMContentLoaded', (): void => {
    const form = document.getElementById('reservation-form') as HTMLFormElement;
    if (form) {
      form.addEventListener('submit', function(e: Event): void {
        const submitButton = document.querySelector('button[type="submit"]') as HTMLButtonElement;
        
        // 送信時の隠しフィールド設定
        const submissionTimeInput = document.getElementById('submission-time') as HTMLInputElement;
        const pageUrlInput = document.getElementById('page-url') as HTMLInputElement;
        
        if (submissionTimeInput) submissionTimeInput.value = new Date().toISOString();
        if (pageUrlInput) pageUrlInput.value = window.location.href;
        
        // ボタンを無効化
        if (submitButton) {
          submitButton.textContent = '送信中...';
          submitButton.disabled = true;
        }
        
        // Netlify Formsが自動処理するため、fetch不要
        // 少し遅延させて成功メッセージを表示
        setTimeout((): void => {
          const formElement = document.getElementById('reservation-form') as HTMLElement;
          const successMessage = document.getElementById('form-success') as HTMLElement;
          
          if (formElement) formElement.style.display = 'none';
          if (successMessage) successMessage.style.display = 'block';
          
          // Google Analytics イベント（もしあれば）
          if (typeof (window as any).gtag !== 'undefined') {
            (window as any).gtag('event', 'reservation_submitted', {
              event_category: 'form',
              event_label: currentEventData.title
            });
          }
          
          // ボタンを復元
          if (submitButton) {
            submitButton.textContent = '予約を送信';
            submitButton.disabled = false;
          }
        }, 1000);
      });
    }

    // モーダル外クリックで閉じる
    const modal = document.getElementById('reservation-modal');
    if (modal) {
      modal.addEventListener('click', function(e: Event): void {
        if (e.target === this) {
          closeReservationModal();
        }
      });
    }

    // ESCキーで閉じる
    document.addEventListener('keydown', function(e: KeyboardEvent): void {
      if (e.key === 'Escape') {
        closeReservationModal();
      }
    });
  });
</script>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .modal-content {
    background: white;
    border-radius: 10px;
    width: 100%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 30px;
    border-bottom: 1px solid #eee;
  }

  .modal-header h3 {
    margin: 0;
    color: #333;
    font-size: 1.5rem;
  }

  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #999;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-button:hover {
    color: #333;
  }

  .reservation-form {
    padding: 30px;
  }

  .form-hint {
    font-size: 0.8rem;
    color: #666;
    margin-top: 5px;
    display: block;
  }

  .form-actions {
    display: flex;
    gap: 15px;
    justify-content: flex-end;
    margin-top: 30px;
  }

  .success-message {
    padding: 40px 30px;
    text-align: center;
  }

  .success-message h3 {
    color: #d32f2f;
    margin-bottom: 20px;
  }

  .success-message p {
    margin-bottom: 15px;
    line-height: 1.6;
    color: #555;
  }

  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .modal {
      padding: 10px;
    }

    .modal-header {
      padding: 15px 20px;
    }

    .modal-header h3 {
      font-size: 1.3rem;
    }

    .reservation-form {
      padding: 20px;
    }

    .form-actions {
      flex-direction: column;
    }

    .success-message {
      padding: 30px 20px;
    }
  }
</style>