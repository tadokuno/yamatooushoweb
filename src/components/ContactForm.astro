---
// src/components/ContactForm.astro
import businessData from '../data/businessProperties.json';
import type { BusinessData } from '../types/businessData';

const data = businessData as BusinessData;
---

<div id="contact-modal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3>お問い合わせ</h3>
      <button class="close-button" onclick="closeContactModal()">&times;</button>
    </div>
    
    <!-- Netlify Forms用のフォーム -->
    <form 
      id="contact-form" 
      class="contact-form" 
      name="contact" 
      method="POST" 
      data-netlify="true"
      data-netlify-honeypot="bot-field"
      action="/contact-success"
    >
      <!-- スパム対策用の隠しフィールド -->
      <input type="hidden" name="form-name" value="contact" />
      <p style="display: none;">
        <label>
          このフィールドは記入しないでください: <input name="bot-field" />
        </label>
      </p>
      
      <div class="form-row">
        <div class="form-group">
          <label for="lastname">姓 <span class="required">*</span></label>
          <input type="text" id="lastname" name="lastname" required>
        </div>
        <div class="form-group">
          <label for="firstname">名 <span class="required">*</span></label>
          <input type="text" id="firstname" name="firstname" required>
        </div>
      </div>
      
      <div class="form-group">
        <label for="email">メールアドレス <span class="required">*</span></label>
        <input type="email" id="email" name="email" required>
      </div>
      
      <div class="form-group">
        <label for="phone">電話番号</label>
        <input type="tel" id="phone" name="phone">
      </div>
      
      <div class="form-group">
        <label for="skill_level">棋力</label>
        <select id="skill_level" name="skill_level">
          <option value="">選択してください</option>
          <option value="初心者">初心者</option>
          <option value="15級-10級">15級-10級</option>
          <option value="9級-6級">9級-6級</option>
          <option value="5級-1級">5級-1級</option>
          <option value="初段-三段">初段-三段</option>
          <option value="四段以上">四段以上</option>
        </select>
      </div>
      
      <div class="form-group">
        <label for="message">メッセージ・ご質問 <span class="required">*</span></label>
        <textarea id="message" name="message" rows="5" placeholder="お気軽にお問い合わせください" required></textarea>
      </div>
      
      <!-- 送信日時を自動追加 -->
      <input type="hidden" id="submitted_at" name="submitted_at" />
      
      <div class="form-actions">
        <button type="button" class="cancel-button" onclick="closeContactModal()">キャンセル</button>
        <button type="submit" class="submit-button">送信する</button>
      </div>
    </form>
    
    <div id="form-success" class="success-message" style="display: none;">
      <h3>お問い合わせを受付いたしました！</h3>
      <p>お問い合わせありがとうございます。内容を確認の上、お返事いたします。</p>
      <p>お急ぎの場合は、お気軽にお電話ください。</p>
      <p><strong>TEL: {data.contactInfo.phone}</strong></p>
      <button class="close-success-button" onclick="closeContactModal()">閉じる</button>
    </div>
  </div>
</div>

<script>
  // グローバル変数の型定義
  declare global {
    interface Window {
      openContactModal: () => void;
      closeContactModal: () => void;
      gtag?: (command: string, event: string, options?: any) => void;
    }
  }

  function openContactModal(): void {
    const modal = document.getElementById('contact-modal') as HTMLElement;
    
    if (modal) modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    // 送信日時を設定
    const now = new Date().toLocaleString('ja-JP', {
      timeZone: 'Asia/Tokyo',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
    
    const submittedAtField = document.getElementById('submitted_at') as HTMLInputElement;
    if (submittedAtField) {
      submittedAtField.value = now;
    }
  }

  function closeContactModal(): void {
    const modal = document.getElementById('contact-modal') as HTMLElement;
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const successMessage = document.getElementById('form-success') as HTMLElement;
    
    if (modal) modal.style.display = 'none';
    document.body.style.overflow = 'auto';
    
    if (form) {
      form.style.display = 'block';
      form.reset();
    }
    
    if (successMessage) successMessage.style.display = 'none';
  }

  // グローバルスコープに関数を追加
  window.openContactModal = openContactModal;
  window.closeContactModal = closeContactModal;

  // DOM要素の取得とイベントリスナーの設定
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const modal = document.getElementById('contact-modal') as HTMLElement;
    
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }
    
    if (modal) {
      modal.addEventListener('click', handleModalClick);
    }
    
    document.addEventListener('keydown', handleKeyDown);
  });

  function handleFormSubmit(e: Event): void {
    const submitButton = document.querySelector('.submit-button') as HTMLButtonElement;
    
    if (!submitButton) return;
    
    // ボタンを無効化（短時間）
    submitButton.textContent = '送信中...';
    submitButton.disabled = true;
    
    // Google Analytics イベント（もしあれば）
    if (typeof window.gtag !== 'undefined') {
      window.gtag('event', 'contact_submitted', {
        event_category: 'form',
        event_label: 'contact_form'
      });
    }
    
    // Netlifyが自動でフォーム処理を行うため、ここでの処理は最小限
    // フォームはNetlifyのサーバーに送信され、設定したページにリダイレクトされる
    
    // 少し待ってからボタンを復元（フォーム送信が失敗した場合用）
    setTimeout(() => {
      if (submitButton) {
        submitButton.textContent = '送信する';
        submitButton.disabled = false;
      }
    }, 3000);
  }

  function handleModalClick(e: Event): void {
    const modal = document.getElementById('contact-modal') as HTMLElement;
    if (e.target === modal) {
      closeContactModal();
    }
  }

  function handleKeyDown(e: KeyboardEvent): void {
    if (e.key === 'Escape') {
      const modal = document.getElementById('contact-modal') as HTMLElement;
      if (modal && modal.style.display === 'flex') {
        closeContactModal();
      }
    }
  }
</script>

<style>
  .modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
    padding: 20px;
  }

  .modal-content {
    background: white;
    border-radius: 10px;
    width: 100%;
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 30px;
    border-bottom: 1px solid #eee;
  }

  .modal-header h3 {
    margin: 0;
    color: #333;
    font-size: 1.5rem;
  }

  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #999;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close-button:hover {
    color: #333;
  }

  .contact-form {
    padding: 30px;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
  }

  .required {
    color: #d32f2f;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 12px;
    border: 2px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s;
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: #d32f2f;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 120px;
  }

  .form-actions {
    display: flex;
    gap: 15px;
    justify-content: flex-end;
    margin-top: 30px;
  }

  .cancel-button,
  .submit-button {
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .cancel-button {
    background-color: #666;
    color: white;
  }

  .cancel-button:hover {
    background-color: #555;
  }

  .submit-button {
    background-color: #d32f2f;
    color: white;
  }

  .submit-button:hover {
    background-color: #b71c1c;
  }

  .submit-button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .success-message {
    padding: 40px 30px;
    text-align: center;
  }

  .success-message h3 {
    color: #d32f2f;
    margin-bottom: 20px;
  }

  .success-message p {
    margin-bottom: 15px;
    line-height: 1.6;
    color: #555;
  }

  .close-success-button {
    background-color: #d32f2f;
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    margin-top: 20px;
  }

  .close-success-button:hover {
    background-color: #b71c1c;
  }

  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .modal {
      padding: 10px;
    }

    .modal-header {
      padding: 15px 20px;
    }

    .modal-header h3 {
      font-size: 1.3rem;
    }

    .contact-form {
      padding: 20px;
    }

    .form-row {
      grid-template-columns: 1fr;
      gap: 0;
    }

    .form-actions {
      flex-direction: column;
    }

    .cancel-button,
    .submit-button {
      width: 100%;
    }

    .success-message {
      padding: 30px 20px;
    }
  }
</style>
